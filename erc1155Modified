// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract Decuple is ERC1155, Ownable, Pausable, ERC1155Burnable {

    // Custom variables

    //mapping id to owener
    mapping (uint256=>address) public Holders;


    //


string public baseURI;


    constructor() ERC1155("https://ipfs.io/ipfs/QmUSBJjLfpwVcsS9hRfM71bEaRFuQDj2r7V3LUEv83S9zX/") {
    setURI("https://ipfs.io/ipfs/QmUSBJjLfpwVcsS9hRfM71bEaRFuQDj2r7V3LUEv83S9zX/");
    }


    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
        baseURI = newuri;
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    // Standard before
    
    // function mint(address account, uint256 id, uint256 amount, bytes memory data)
    //     public
    //     onlyOwner
    // {
    //     _mint(account, id, amount, data);
    // }
    
    function mint(address account, uint256 id, uint256 amount, bytes memory data)
        public
        
    {
        // Uniqueness of NFTs
        require(amount==1,"Wrong amount.");
        require(id>0,"Wrong id.");
        require(id<11,"Wrong id.");
        require(Holders[id] == address(0),"Token has been minted before");

        _mint(account, id, 1, data);
        Holders[id]=account;
    }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }

    function uri (uint256 tokenId) override public view returns(string memory){
            return string(abi.encodePacked(baseURI,
            Strings.toString(tokenId),
            ".json")
            );
    }


    function ownerOf (uint256 tokenId) public view returns (address){
        return Holders[tokenId];
    }
}
